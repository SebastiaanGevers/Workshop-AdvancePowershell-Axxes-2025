# Environment Validation Script
# Run this to verify the DBA tools workshop environment is working correctly

Write-Host "üîç Validating DBA Tools Workshop Environment..." -ForegroundColor Cyan
Write-Host ""

# Test 1: Check if dbatools module is available
Write-Host "1Ô∏è‚É£ Checking dbatools module..." -ForegroundColor Yellow
try {
    Import-Module dbatools -ErrorAction Stop
    $dbatoolsVersion = (Get-Module dbatools).Version
    Write-Host "   ‚úÖ dbatools $dbatoolsVersion loaded successfully" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Failed to load dbatools module: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Test 2: Check SQL Server container status
Write-Host "2Ô∏è‚É£ Checking SQL Server container..." -ForegroundColor Yellow
try {
    $containerStatus = docker ps --filter "name=sqlserver-workshop" --format "table {{.Status}}"
    if ($containerStatus -match "Up") {
        Write-Host "   ‚úÖ SQL Server container is running" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå SQL Server container is not running" -ForegroundColor Red
        Write-Host "   üìù Try running: docker start sqlserver-workshop" -ForegroundColor Yellow
        exit 1
    }
} catch {
    Write-Host "   ‚ùå Failed to check container status: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Test 3: Test database connection
Write-Host "3Ô∏è‚É£ Testing database connection..." -ForegroundColor Yellow
try {
    # Create secure credential
    $password = ConvertTo-SecureString "Workshop2024!" -AsPlainText -Force
    $cred = New-Object System.Management.Automation.PSCredential("sa", $password)
    
    # Wait a moment for SQL Server to be fully ready
    Start-Sleep -Seconds 5
    
    # Test connection with certificate trust
    $testResult = Test-DbaConnection -SqlInstance localhost -SqlCredential $cred -TrustServerCertificate
    
    if ($testResult.ConnectSuccess) {
        Write-Host "   ‚úÖ Database connection successful" -ForegroundColor Green
        Write-Host "   üìä SQL Server Version: $($testResult.SqlVersion)" -ForegroundColor Gray
    } else {
        Write-Host "   ‚ùå Database connection failed" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "   ‚ùå Connection test failed: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   üí° SQL Server might still be starting up. Wait 30 seconds and try again." -ForegroundColor Yellow
    exit 1
}

# Test 4: Check if sample databases exist
Write-Host "4Ô∏è‚É£ Checking sample databases..." -ForegroundColor Yellow
try {
    $databases = Get-DbaDatabase -SqlInstance localhost -SqlCredential $cred -TrustServerCertificate
    $workshopDb = $databases | Where-Object { $_.Name -eq "WorkshopDB" }
    
    if ($workshopDb) {
        Write-Host "   ‚úÖ WorkshopDB found" -ForegroundColor Green
        
        # Check for sample data
        $employeeCount = Invoke-DbaQuery -SqlInstance localhost -SqlCredential $cred -Database WorkshopDB -TrustServerCertificate -Query "SELECT COUNT(*) as Count FROM Employees"
        Write-Host "   üìà Employee records: $($employeeCount.Count)" -ForegroundColor Gray
    } else {
        Write-Host "   ‚ùå WorkshopDB not found" -ForegroundColor Red
        Write-Host "   üí° Run create-workshop-db.ps1 to create sample databases" -ForegroundColor Yellow
    }
} catch {
    Write-Host "   ‚ùå Failed to check databases: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 5: Test a few common dbatools commands
Write-Host "5Ô∏è‚É£ Testing key dbatools commands..." -ForegroundColor Yellow
try {
    # Test database listing
    $dbCount = (Get-DbaDatabase -SqlInstance localhost -SqlCredential $cred -TrustServerCertificate).Count
    Write-Host "   ‚úÖ Get-DbaDatabase: Found $dbCount databases" -ForegroundColor Green
    
    # Test backup history
    $backupHistory = Get-DbaDbBackupHistory -SqlInstance localhost -SqlCredential $cred -TrustServerCertificate | Select-Object -First 1
    Write-Host "   ‚úÖ Get-DbaDbBackupHistory: Command executed successfully" -ForegroundColor Green
    
    # Test space usage
    $spaceInfo = Get-DbaDbSpace -SqlInstance localhost -SqlCredential $cred -TrustServerCertificate | Select-Object -First 1
    Write-Host "   ‚úÖ Get-DbaDbSpace: Command executed successfully" -ForegroundColor Green
    
} catch {
    Write-Host "   ‚ö†Ô∏è Some dbatools commands may have issues: $($_.Exception.Message)" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéâ Environment Validation Complete!" -ForegroundColor Green
Write-Host ""
Write-Host "üìñ Next Steps:" -ForegroundColor Cyan
Write-Host "   1. Open DBA-TOOLS-WORKSHOP-GUIDE.md for exercises"
Write-Host "   2. Start with Exercise 1: Basic Connection and Discovery"
Write-Host "   3. Use the credential: sa / Workshop2024!"
Write-Host ""
Write-Host "üîß If you encounter issues:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Check that Docker is running"
Write-Host "   ‚Ä¢ Restart SQL Server: docker restart sqlserver-workshop"
Write-Host "   ‚Ä¢ Re-create databases: .\.devcontainer\create-workshop-db.ps1"
Write-Host ""